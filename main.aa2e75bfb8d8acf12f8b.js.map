{"version":3,"sources":["webpack:///./js/task-01.js","webpack:///./js/task-02.js","webpack:///./js/task-03.js"],"names":["delay","ms","Promise","resolve","setTimeout","logger","time","console","log","then","allUsers","userName","name","active","reject","map","user","updatedUsers","table","makeTransaction","transaction","min","max","Math","floor","random","id","logSuccess","logError","warn","amount","catch"],"mappings":"6JAAMA,EAAQ,SAAAC,GACZ,OAAO,IAAIC,SAAQ,SAACC,GAClBC,YAAW,WACTD,EAAQF,KACPA,OAIDI,EAAS,SAAAC,GAAI,OAAIC,QAAQC,IAAR,kBAA8BF,EAA9B,OAGvBN,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,KAAMS,KAAKJ,GACjBL,EAAM,MAAMS,KAAKJ,G,ICNQK,EAAUC,E,+BAAVD,EAPX,CACZ,CAAEE,KAAM,QAASC,QAAQ,GACzB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,OAAQC,QAAQ,GACxB,CAAED,KAAM,MAAOC,QAAQ,IAGUF,EAaZ,MAZd,IAAIT,SAAQ,SAACC,EAASW,GAI3BX,EAHqBO,EAASK,KAAI,SAAAC,GAAI,OACtCA,EAAKJ,OAASD,EAAd,iBAA8BK,EAA9B,CAAoCH,QAASG,EAAKH,SAAWG,UAUnCP,MAJf,SAAAQ,GAAY,OAAIV,QAAQW,MAAMD,MChB7C,IAIME,EAAkB,SAACC,GACvB,OAAO,IAAIlB,SAAQ,SAACC,EAASW,GAC3B,IAN+BO,EAAKC,EAM9BtB,GANyBqB,EAMS,IANJC,EAMS,IALxCC,KAAKC,MAAMD,KAAKE,UAAYH,EAAMD,EAAM,GAAKA,IAOlDjB,YAAW,WACQmB,KAAKE,SAAW,GAGjCtB,EAAQ,CAACiB,EAAYM,GAAI1B,IAEzBc,EAAOM,EAAYM,MAEpB1B,OAKC2B,EAAa,SAAC,GAAe,IAAdD,EAAc,KAAVpB,EAAU,KACjCC,QAAQC,IAAR,eAA2BkB,EAA3B,iBAA8CpB,EAA9C,OAGIsB,EAAW,SAAAF,GACfnB,QAAQsB,KAAR,gCAA6CH,EAA7C,8BAIFP,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOrB,KAAKkB,GAAYI,MAAMH,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOrB,KAAKkB,GAAYI,MAAMH,GAChET,EAAgB,CAAEO,GAAI,GAAII,OAAQ,KAAMrB,KAAKkB,GAAYI,MAAMH,GAC/DT,EAAgB,CAAEO,GAAI,GAAII,OAAQ,MAAOrB,KAAKkB,GAAYI,MAAMH,K","file":"main.aa2e75bfb8d8acf12f8b.js","sourcesContent":["const delay = ms => {\r\n  return new Promise((resolve) => {\r\n    setTimeout(() => {\r\n      resolve(ms);\r\n    }, ms)\r\n  })\r\n};\r\n\r\nconst logger = time => console.log(`Resolved after ${time}ms`);\r\n\r\n// Вызовы функции для проверки\r\ndelay(2000).then(logger); // Resolved after 2000ms\r\ndelay(1000).then(logger); // Resolved after 1000ms\r\ndelay(1500).then(logger); // Resolved after 1500ms","const users = [\r\n  { name: 'Mango', active: true },\r\n  { name: 'Poly', active: false },\r\n  { name: 'Ajax', active: true },\r\n  { name: 'Lux', active: false },\r\n];\r\n\r\nconst toggleUserState = (allUsers, userName) => {\r\n  return new Promise((resolve, reject) => {\r\n    const updatedUsers = allUsers.map(user =>\r\n    user.name === userName ? { ...user, active: !user.active } : user,\r\n    );\r\n    resolve(updatedUsers);\r\n   })\r\n};\r\n\r\nconst logger = updatedUsers => console.table(updatedUsers);\r\n\r\n\r\n// Вызов функции для проверки\r\ntoggleUserState(users, 'Lux').then(logger);","const randomIntegerFromInterval = (min, max) => {\r\n  return Math.floor(Math.random() * (max - min + 1) + min);\r\n};\r\n\r\nconst makeTransaction = (transaction) => {\r\n  return new Promise((resolve, reject) => {\r\n    const delay = randomIntegerFromInterval(200, 500);\r\n\r\n    setTimeout(() => {\r\n    const canProcess = Math.random() > 0.3;\r\n\r\n      if (canProcess) {\r\n      resolve([transaction.id, delay]);\r\n    } else {\r\n      reject(transaction.id);\r\n    }\r\n  }, delay);\r\n   })\r\n  \r\n};\r\n\r\nconst logSuccess = ([id, time]) => {\r\n  console.log(`Transaction ${id} processed in ${time}ms`);\r\n};\r\n\r\nconst logError = id => {\r\n  console.warn(`Error processing transaction ${id}. Please try again later.`);\r\n};\r\n\r\n// Вызовы функции для проверки\r\nmakeTransaction({ id: 70, amount: 150 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 71, amount: 230 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 72, amount: 75 }).then(logSuccess).catch(logError);\r\nmakeTransaction({ id: 73, amount: 100 }).then(logSuccess).catch(logError);"],"sourceRoot":""}